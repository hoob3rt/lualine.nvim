*lualine.txt*                      blazing fast and easy to configure statusline
                                                          *lualine.nvim* *lualine*
   __         __  __     ______     __         __     __   __     ______
  /\ \       /\ \/\ \   /\  __ \   /\ \       /\ \   /\ "-.\ \   /\  ___\
  \ \ \____  \ \ \_\ \  \ \  __ \  \ \ \____  \ \ \  \ \ \-.  \  \ \  __\
   \ \_____\  \ \_____\  \ \_\ \_\  \ \_____\  \ \_\  \ \_\\"\_\  \ \_____\
    \/_____/   \/_____/   \/_/\/_/   \/_____/   \/_/   \/_/ \/_/   \/_____/

Author: hoob3rt (https://github.com/hoob3rt)
License: MIT License
Repository: https://github.com/hoob3rt/lualine.nvim

==============================================================================
CONTENTS                                                      *lualine_contents*

1. lualine.nvim..........................................|lualine_lualine.nvim|
    1.1. Usage and customization..............|lualine_usage_and_customization|
      1.1.1 Starting lualine.........................|lualine_starting_lualine|
      1.1.2 Setting a theme.....................................|lualine_theme|
      1.1.3 Separators.....................................|lualine_separators|
      1.1.4 Changing components............................|lualine_components|
      1.1.5 Custom components.......................|lualine_custom_components|
      1.1.6 Component options.......................|lualine_component_options|
      1.1.7 Tabline...........................................|lualine_tabline|
      1.1.8 Extensions.....................................|lualine_extensions|
    1.2  Config examples..............................|lualine_config_examples|
        1.2.1 Lua config example...................|lualine_lua_config_example|
        1.2.2 Vimscript config example.......|lualine_vimscript_config_example|

==============================================================================
USAGE AND CUSTOMIZATION                        *lualine_usage_and_customization*

Lualine has sections as shown below.
>
    +-------------------------------------------------+
    | A | B | C                             X | Y | Z |
    +-------------------------------------------------+

Each sections holds it's components e.g. current vim's mode.
Colorscheme of sections is mirrored, meaning section `A` will have the same
colorscheme as section `Z` etc.

------------------------------------------------------------------------------
STARTING LUALINE                      *lualine_starting_lualine* *lualine.setup()*
>
    require('lualine').setup()

Default config~
>
    require'lualine'.setup {
      options = {
        icons_enabled = true,
        theme = 'gruvbox',
        component_separators = {'', ''},
        section_separators = {'', ''},
        disabled_filetypes = {}
      },
      sections = {
        lualine_a = {'mode'},
        lualine_b = {'branch'},
        lualine_c = {'filename'},
        lualine_x = {'encoding', 'fileformat', 'filetype'},
        lualine_y = {'progress'},
        lualine_z = {'location'}
      },
      inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = {'filename'},
        lualine_x = {'location'},
        lualine_y = {},
        lualine_z = {}
      },
      tabline = {},
      extensions = {}
    }

------------------------------------------------------------------------------
SETTING A THEME                                                  *lualine_theme*
>
    options = {theme = 'gruvbox'}

Available themes are listed here:
https://github.com/hoob3rt/lualine.nvim/blob/master/THEMES.md

Customizing themes~
>
    local custom_gruvbox = require'lualine.themes.gruvbox'

    -- Chnage the background of lualine_c section for normal mode
    custom_gruvbox.normal.c.bg = '#112233' -- rgb colors are supported

    require'lualine'.setup{
      options = { theme  = custom_gruvbox },
      ...
    }
<
The theme structure is available here:
https://github.com/hoob3rt/lualine.nvim/blob/master/CONTRIBUTING.md#adding-a-theme

------------------------------------------------------------------------------
SEPARATORS                                                  *lualine_separators*

Lualine defines two kinds of seperators:
    *   |section_separators| - separators between sections
    *   |components_separators| - separators between components in sections
>
    options = {
      section_separators = {'', ''},
      component_separators = {'', ''}
    }

Disabling separators~
>
    options = {section_separators = '', component_separators = ''}

------------------------------------------------------------------------------
CHANGING COMPONENTS IN LUALINE SECTIONS                     *lualine_components*

    `sections = {lualine_a = {'mode'}}`

Available components~
    general~
        *   |branch| (git branch)
        *   |diagnostics| (diagnostics count from your preferred source)
        *   |encoding| (file encoding)
        *   |fileformat| (file format)
        *   |filename|
        *   |filetype|
        *   |hostname|
        *   |location| (location in file in line:column format)
        *   |mode| (vim mode)
        *   |progress| (%progress in file)
        *   |diff| (git diff status)

------------------------------------------------------------------------------
CUSTOM COMPONENTS                                    *lualine_custom_components*

Lua functions as lualine component~
>
    local function hello()
      return [[hello world]]
    end
    sections = {lualine_a = {hello}}
<
Vim functions as lualine component~
>
    sections = {lualine_a = {'FugitiveHead'}}
<
Vim variables as lualine component~

Variables from `g:`, `v:`, `t:`, `w:`, `b:`, `o`, `go:`, `vo:`, `to:`, `wo:`, `bo:` scopes can be used.
See `:h lua-vim-variables` and `:h lua-vim-options` if you are not sure what to use.
>
    sections = {lualine_a = {'g:coc_status', 'bo:filetype'}}
<
Lua expressions as lualine component~

You can use any valid lua expression as a component including
    *   oneliners
    *   global variables
    *   require statements
>
    sections = {lualine_c = {"os.data('%a')", 'data', require'lsp-status'.status}}

`data` is a global variable in this example.

------------------------------------------------------------------------------
COMPONENT OPTIONS                                    *lualine_component_options*

Component options can change the way a component behave.
There are two kinds of options:
    *   global options affecting all components
    *   local options affecting specific

Global options can be used as local options (can be applied to specific components)
but you cannot use local options as global.
Global option used locally overwrites the global, for example:
>
    require'lualine'.setup {
      options = {lower = true},
      sections = {lualine_a = {{'mode', lower = false}}, lualine_b = {'branch'}}
    }

`mode` will be displayed with `lower = false` and `branch` will be displayed with `lower = true`

Available options:~

Global options~
---------------
option       (default_value)
------       ---------------

 • |icons_enabled|       (true)
    Displays icons on components
    Supported components: |branch|, |fileformat|, |filetype|, |location|, |diagnostics|

  • |icon|          (depends on component)
    Displays an icon in front of a component
    Supported components: all

  • |padding|       (1)
    Padding on left and right side of component/components
    Supported components: all

  • |left_padding|  (1)
    Padding on left side of component/components
    Supported components: all

  • |right_padding| (1)
    Padding on right side of component/components
    Supported components: all

  • |separator| (component_separators)
    Overwrites |component_separators|
    Supported components: all

  • |upper|         (false)
    Display component/components in uppercase
    Supported components: all

  • |lower|         (false)
    Display component/components in lowercase
    Supported components: all

  • |format|        (nil)
    Takes a function, the function gets the result of component
    as argument and it's return value is displayed which enables users to 
    format component output to their liking.
    Supported components: all

  Example:
>
    options = {
      icons_enabled = true,
      format = function(data) return data:sub(1, 1) end
    }

Local options~
---------------
option       (default_value)
------       ---------------

  • |icon|          (differs for each component)
    Displays an icon in front of a component

  • |condition|     (nil)
    Takes a function. The component is loaded if the function
    returns true otherwise not. It can be used to load some
    components on specific cases.

  • |color|         (Theme colors)
    Sets custom color for a component.
    Color format:
    `lua color = {fg = '#rrggbb', bg= '#rrggbb', gui='style'}`
    The members of color table are optional and default to theme
    Color option can also be a string containing highlight group name >
    color = "WarningMsg"`
<    One neat trick is  to set the color to highlight group name then change
    that highlight with the `:hi` command to change color of that component
    at runtime.

Component specific local options~
---------------
Some components have unique options.

  • diagnostics~
    • |sources|  (nil)
      Displays diagnostic count from defined source
      array containing one or many string from set
      {'nvim_lsp', 'coc', 'ale', 'vim_lsp'}

    • |sections|  ({'error', 'warn', 'info'})
      Displays diagnostics of defined severity
      array containing one or many string from set
      {'error', 'warn', 'info'}

    • |color_error| (DiffDelete foreground color)
      Changes diagnostic's error section foreground color
      color in #rrggbb format

    • |color_warn| (DiffText foreground color)
      Changes diagnostic's warn section foreground color
      color in #rrggbb format

    • |color_info| (Normal foreground color)
      Changes diagnostic's info section foreground color
      color in #rrggbb format

    • |symbols| (icons_enabled: true  -> {error = ' ', warn = ' ', info = ' '})
              (icons_enabled: false -> {error = 'E:', warn = 'W:', info = 'I:'})
      Changes diagnostic's symbol characters. You can set one or more symbols
      for each level.
      >
          {
            'diagnostics',
            symbols = {
              -- set the error symbol and use defaults for warn and info.
              error = '!!',
            },
          }
<
  • filename~
    • |file_status| (true)
      Displays file status (readonly status, modified status)

    • |path| (0)
      Filename `path` option: 0 = just filename
                            1 = relative path
                            2 = absolute path

    • |symbols| (`{modified = '[+]', readonly = '[-]'}`)
      Changes status symbols

  • filetype~
    • |colored|  (true)
      Displays filetype icon in color if set to `true`

  • diff~
    • |colored| (true)
      Displays diff status in color if set to `true`

    • |color_added| (DiffAdd foreground color)
      Changes diff's added section foreground color
      Color in `#rrggbb` format

    • |color_modified| (DiffChange foreground color)
      Changes diff's changed section foreground color
      Color in `#rrggbb` format

    • |color_removed| (DiffDelete foreground color)
      Changes diff's removed section foreground color
      Color in `#rrggbb` format

    • |symbols| (`{added = '+', modified = '~', removed = '-'}`)
      Changes diff's symbols
      Color in `#rrggbb` format

------------------------------------------------------------------------------
TABLINE                                                        *lualine_tabline*

You can use lualine to display components in tabline.
The configuration for tabline sections is exactly the same as for statusline.
>
    tabline = {
      lualine_a = {},
      lualine_b = {'branch'},
      lualine_c = {'filename'},
      lualine_x = {},
      lualine_y = {},
      lualine_z = {},
    }
<
This will show branch and filename component on top of neovim inside tabline.

You can also completely move your statuline to tabline by configuring 
|lualine.tabline| and disabling |lualine.sections| and |lualine.inactive_sections|.
>
    tabline = {
    ......
      }
    sections = {}
    inactive_sections = {}

------------------------------------------------------------------------------
EXTENSIONS                                                  *lualine_extensions*

Lualine extensions change statusline appearance for a window/buffer with
specified filetypes.

By default no plugin extension are loaded to improve performance. 
You can load extensions with:
>
    extensions = {'quickfix'}
<
Available extensions
    * |chadtree|
    * |fugitive|
    * |fzf|
    * |nerdtree|
    * |nvim-tree|
    * |quickfix|

==============================================================================
DISABLING LUALINE                                              *lualine_disable*

You can disable lualine for specific filetypes

`options = {disabled_filetypes = {'lua'}}`

==============================================================================

CONGIG EXAMPLES                                        *lualine_config_examples*

------------------------------------------------------------------------------
LUA CONFIG EXAMPLE                                  *lualine_lua_config_example*
>
    use {
    'hoob3rt/lualine.nvim',
    requires = {'kyazdani42/nvim-web-devicons', opt = true},
    config = function()
      require('lualine').setup{
        options = {
          theme = 'gruvbox',
          section_separators = {'', ''},
          component_separators = {'', ''},
          disabled_filetypes = {},
          icons_enabled = true,
        },
        sections = {
          lualine_a = { {'mode', upper = true} },
          lualine_b = { {'branch', icon = ''} },
          lualine_c = { {'filename', file_status = true} },
          lualine_x = { 'encoding', 'fileformat', 'filetype' },
          lualine_y = { 'progress' },
          lualine_z = { 'location'  },
        },
        inactive_sections = {
          lualine_a = {  },
          lualine_b = {  },
          lualine_c = { 'filename' },
          lualine_x = { 'location' },
          lualine_y = {  },
          lualine_z = {   }
        },
        extensions = { 'fzf' }
      }
    end
    }
<
------------------------------------------------------------------------------
VIMSCRIPT CONFIG EXAMPLE                      *lualine_vimscript_config_example*
>
    let g:lualine = {
        \'options' : {
        \  'theme' : 'gruvbox',
        \  'section_separators' : ['', ''],
        \  'component_separators' : ['', ''],
        \  'disabled_filetypes' : [],
        \  'icons_enabled' : v:true,
        \},
        \'sections' : {
        \  'lualine_a' : [ ['mode', {'upper': v:true,},], ],
        \  'lualine_b' : [ ['branch', {'icon': '',}, ], ],
        \  'lualine_c' : [ ['filename', {'file_status': v:true,},], ],
        \  'lualine_x' : [ 'encoding', 'fileformat', 'filetype' ],
        \  'lualine_y' : [ 'progress' ],
        \  'lualine_z' : [ 'location'  ],
        \},
        \'inactive_sections' : {
        \  'lualine_a' : [  ],
        \  'lualine_b' : [  ],
        \  'lualine_c' : [ 'filename' ],
        \  'lualine_x' : [ 'location' ],
        \  'lualine_y' : [  ],
        \  'lualine_z' : [  ],
        \},
        \'extensions' : [ 'fzf' ],
        \}
    lua require("lualine").setup()
<
-----------------------------------------------------------------------------
vim:tw=80:sw=4:ts=8:noet:ft=help:norl:et:
